import groovy.json.JsonSlurper

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */

plugins {
    id 'java'
    id 'maven-publish'
    id "com.adarshr.test-logger" version "1.6.0"
    id "io.codearte.nexus-staging" version "0.20.0"
}

def npmPackage = new JsonSlurper().parseText(new File('./package.json').text);

group = 'io.github.seansund'
version = npmPackage.version ?: '0.0.0'

def appName = npmPackage.name
def appDescription = npmPackage.description
def license = npmPackage.license
def homepage = npmPackage.homepage
def repoUrl = npmPackage.repository.url

ext {
    springVersion = '5.0.9.RELEASE'
    jacksonVersion = '2.9.6'
    junitVersion = '5.4.2'
    mockitoVersion = '1.10.19'
    powermockMockitoVersion = '1.7.4'
}

compileTestJava {
    options.compilerArgs << '-Xlint:deprecation'
    options.compilerArgs << '-Xlint:unchecked'
}

dependencies {
    compileOnly group: 'org.springframework', name: 'spring-web', version: springVersion
    testCompile group: 'org.springframework', name: 'spring-web', version: springVersion

    compileOnly group: 'org.springframework', name: 'spring-context', version: springVersion
    testCompile group: 'org.springframework', name: 'spring-context', version: springVersion

    testCompile group: 'org.springframework', name: 'spring-test', version: springVersion

    compileOnly group: 'org.springframework.boot', name: 'spring-boot', version: '2.0.5.RELEASE'
    testCompile group: 'org.springframework.boot', name: 'spring-boot', version: '2.0.5.RELEASE'

    compileOnly group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.6'
    testCompile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.6'

    compileOnly group: 'javax.servlet', name: 'javax.servlet-api', version: '4.0.1'
    testCompile group: 'javax.servlet', name: 'javax.servlet-api', version: '4.0.1'

    compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.9.2'

    compileOnly group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    testCompile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'

    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: jacksonVersion
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jacksonVersion
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: jacksonVersion

    testCompile("org.mockito:mockito-all:${mockitoVersion}")
    testCompile("org.powermock:powermock-api-mockito:${powermockMockitoVersion}")
    testCompile("org.powermock:powermock-module-junit4:${powermockMockitoVersion}")
    testImplementation(
            "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    )
    testRuntimeOnly(
            "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    )

    compileOnly 'org.projectlombok:lombok:1.18.6'
    annotationProcessor 'org.projectlombok:lombok:1.18.6'
}

repositories {
    mavenCentral()
}

test {
    useJUnitPlatform {
        excludeTags "integration"
    }

    reports {
        junitXml.enabled = true
        html.enabled = true
    }
}

task integrationTest(type: Test) {
    useJUnitPlatform {
        includeTags "integration"
    }

    reports {
        junitXml.enabled = true
        html.enabled = true
    }
}

publishing {
    repositories {
        maven {
            def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
            def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots'
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = nexusUsername
                password = nexusPassword
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = "${appName}".toString()
                description = "${appDescription}".toString()
                url = "${homepage}".toString()
                developers {
                    developer {
                        id = 'seansund'
                        name = 'Sean Sundberg'
                        email = 'seansund@us.ibm.com'
                    }
                }
                scm {
                    connection = "scm:git:${repoUrl}".toString()
                    developerConnection = "scm:git:${repoUrl}".toString()
                    url = "${homepage}".toString()
                }
            }
        }
    }
}
